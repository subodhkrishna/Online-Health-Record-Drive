package Client;


import Connection.DB;
import Server.SOptions;
import Server.ServerLogin;
import java.awt.GraphicsDevice;
import static java.awt.GraphicsDevice.WindowTranslucency.TRANSLUCENT;
import java.awt.GraphicsEnvironment;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.*;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.SwingUtilities;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author selvarani
 */
public class ViewRequests extends javax.swing.JFrame {
 String us, ip,op="";
    int port,port1;
    String p;
    String url,downfile="";
      String ext="";
    ResultSet rs;
 DB Db=new DB();
 Vector v=new Vector();
    /**
     * Creates new form Download
     */
    public ViewRequests() {
        initComponents();
        
    }
 ViewRequests(String user1,String p1, String ip1,int port2,String op1) throws SQLException{
        //To change body of generated methods, choose Tools | Templates.
         p = p;
        us = user1;
        System.out.println(us);
        port1 = port2;
        ip = ip1;
        op=op1;
        GraphicsEnvironment ge = 
            GraphicsEnvironment.getLocalGraphicsEnvironment();
        GraphicsDevice gd = ge.getDefaultScreenDevice();

        //If translucent windows aren't supported, exit.
        if (!gd.isWindowTranslucencySupported(TRANSLUCENT)) {
            System.err.println(
                "Translucency is not supported");
                System.exit(0);
        }
        
        JFrame.setDefaultLookAndFeelDecorated(true);

        // Create the GUI on the event-dispatching thread
       
               // SOptions tw = new SOptions();
                

                // Set the window to 55% opaque (45% translucent).
         // setOpacity(0.5f);
 initComponents();
  this.setTitle(us+"-VIEW REQUESTS");
 rs=Db.Select("Select distinct(req.ip),registration.username from req join registration on req.port=registration.port where req.user='"+us+"' and registration.status='ON' and req.st='Not'");
 while(rs.next())
 {
     v.add(rs.getString(2));
 }
 rs.close();
  jList1.setListData(v);
 
                // Display the window.
                setVisible(true);
            }



/**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jScrollPane2 = new javax.swing.JScrollPane();
        jList2 = new javax.swing.JList();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("VIEW REQUESTS");
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jList1.setFont(new java.awt.Font("Georgia", 1, 11)); // NOI18N
        jList1.setForeground(new java.awt.Color(204, 51, 0));
        jList1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jList1MouseClicked(evt);
            }
        });
        jList1.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jList1ValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(jList1);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(31, 100, 212, 184));

        jList2.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jList2ValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(jList2);

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(279, 100, 220, 184));

        jButton1.setFont(new java.awt.Font("Georgia", 1, 11)); // NOI18N
        jButton1.setForeground(new java.awt.Color(255, 51, 0));
        jButton1.setText("CLOSE");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 310, 90, -1));

        jButton2.setFont(new java.awt.Font("Georgia", 1, 11)); // NOI18N
        jButton2.setForeground(new java.awt.Color(255, 51, 0));
        jButton2.setText("SEND FILE");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 310, 110, -1));

        jLabel1.setFont(new java.awt.Font("Georgia", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("An Adaptive Cloud Downloading Service");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 19, -1, -1));

        jLabel2.setFont(new java.awt.Font("Georgia", 1, 12)); // NOI18N
        jLabel2.setText("Server Files Type");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(94, 65, -1, -1));

        jLabel3.setFont(new java.awt.Font("Georgia", 1, 12)); // NOI18N
        jLabel3.setText("Server Files");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 70, -1, -1));

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Server/images/Red-Abstract-Background-640x400.jpg"))); // NOI18N
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 530, 390));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jList1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jList1MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jList1MouseClicked

    private void jList2ValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jList2ValueChanged
        if (!evt.getValueIsAdjusting()) {
            System.out.println("Came here");
            Object o = jList2.getSelectedValue();
            System.out.println(o.toString() + " is selected.");
            downfile = o.toString();
             System.out.println(downfile);
        }



    }//GEN-LAST:event_jList2ValueChanged

    private void jList1ValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jList1ValueChanged
     System.out.println("\njList1_valueChanged(ListSelectionEvent e) called.");
            if (!evt.getValueIsAdjusting()) {
                Object o = jList1.getSelectedValue();
                System.out.println(o.toString() + " is selected.");
ext="";
      ext = o.toString();
Vector fn=new Vector();
                    rs=Db.Select("Select req.fn from req join registration on req.port=registration.port where registration.username ='"+ext+"' and req.st='Not' and req.user!='"+ext+"'");
         try {
             while(rs.next())
             {
                fn.add(rs.getString("fn"));
             }
         } catch (SQLException ex) {
             Logger.getLogger(ViewRequests.class.getName()).log(Level.SEVERE, null, ex);
         }
         try {
             rs.close();
         } catch (SQLException ex) {
             Logger.getLogger(ViewRequests.class.getName()).log(Level.SEVERE, null, ex);
         }
                System.out.println("Client received the files from the server");
                jList2.setListData(fn);


            }
downfile=""; 

    }//GEN-LAST:event_jList1ValueChanged

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
     
       setVisible(false);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
               if(downfile.compareToIgnoreCase("")!=0)
{
        System.out.println("coming to view Requests");
       Socket s2 = null;String ip1="";
       rs=Db.Select("Select * from req join registration on req.port=registration.port where registration.username='"+ext+"' and fn='"+downfile+"' and req.st='Not'");
       try {
           if(rs.next())
             {
                 ip1=rs.getString("ip");
                port=rs.getInt("port");
             }
             rs.close();
    
         s2 = new Socket(ip1,port);
     } catch (UnknownHostException ex) {
         Logger.getLogger(ViewRequests.class.getName()).log(Level.SEVERE, null, ex);
     } catch (IOException ex) {
         Logger.getLogger(ViewRequests.class.getName()).log(Level.SEVERE, null, ex);
     } catch (SQLException ex) {
         Logger.getLogger(ViewRequests.class.getName()).log(Level.SEVERE, null, ex);
     }
               
System.out.println("Socket Created"+port);
        
System.out.println("Send file"+downfile);


                File myFile = new File (System.getProperty("user.dir") + "/" +us+ "/" + downfile);
                if(myFile.exists())
                {
                           DataOutputStream dos;   
           try {
               dos = new DataOutputStream(s2.getOutputStream());
            
                     dos.writeUTF("Yes");
      byte [] mybytearray  = new byte [(int)myFile.length()];
      FileInputStream fis = new FileInputStream(myFile);
      BufferedInputStream bis = new BufferedInputStream(fis);
      bis.read(mybytearray,0,mybytearray.length);
      OutputStream os = s2.getOutputStream();
      System.out.println("Sending...");
      os.write(mybytearray,0,mybytearray.length);
      os.flush();
          bis.close();
      s2.close();
 System.out.println("Send Successful"+downfile);
    Thread.sleep(5000);
     } catch (Exception ex) {
             Logger.getLogger(ViewRequests.class.getName()).log(Level.SEVERE, null, ex);
           }
                }
                else
                {
                    DataOutputStream dos;  
           try {
               dos = new DataOutputStream(s2.getOutputStream());
             dos.writeUTF("No");
                   dos.writeUTF("The Requested File is not Exist in that peer");  
                   dos.close();
                    s2.close();
                    } catch (IOException ex) {
               Logger.getLogger(ViewRequests.class.getName()).log(Level.SEVERE, null, ex);
           }
              
                }
    }
                else
                JOptionPane.showMessageDialog(null, "You Have not Choosen any file to Download", "Error", JOptionPane.ERROR_MESSAGE);
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
       GraphicsEnvironment ge = 
            GraphicsEnvironment.getLocalGraphicsEnvironment();
        GraphicsDevice gd = ge.getDefaultScreenDevice();

        //If translucent windows aren't supported, exit.
        if (!gd.isWindowTranslucencySupported(TRANSLUCENT)) {
            System.err.println(
                "Translucency is not supported");
                System.exit(0);
        }
        
        JFrame.setDefaultLookAndFeelDecorated(true);

        // Create the GUI on the event-dispatching thread
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                ViewRequests tw = new ViewRequests();

                // Set the window to 55% opaque (45% translucent).
          tw.setOpacity(0.5f);

                // Display the window.
                tw.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JList jList1;
    private javax.swing.JList jList2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
}
